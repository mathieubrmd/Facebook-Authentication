{
  "_args": [
    [
      {
        "raw": "collect-all@^1.0.2",
        "scope": null,
        "escapedName": "collect-all",
        "name": "collect-all",
        "rawSpec": "^1.0.2",
        "spec": ">=1.0.2 <2.0.0",
        "type": "range"
      },
      "/Users/mathieubourmaud/WebstormProjects/Facebook-Login/node_modules/collect-json"
    ]
  ],
  "_from": "collect-all@>=1.0.2 <2.0.0",
  "_id": "collect-all@1.0.2",
  "_inCache": true,
  "_location": "/collect-json/collect-all",
  "_nodeVersion": "5.10.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/collect-all-1.0.2.tgz_1460632533188_0.6129793878644705"
  },
  "_npmUser": {
    "name": "75lb",
    "email": "75pound@gmail.com"
  },
  "_npmVersion": "3.8.7",
  "_phantomChildren": {},
  "_requested": {
    "raw": "collect-all@^1.0.2",
    "scope": null,
    "escapedName": "collect-all",
    "name": "collect-all",
    "rawSpec": "^1.0.2",
    "spec": ">=1.0.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/collect-json"
  ],
  "_resolved": "https://registry.npmjs.org/collect-all/-/collect-all-1.0.2.tgz",
  "_shasum": "39450f1e7aa6086570a006bce93ccf1218a77ea1",
  "_shrinkwrap": null,
  "_spec": "collect-all@^1.0.2",
  "_where": "/Users/mathieubourmaud/WebstormProjects/Facebook-Login/node_modules/collect-json",
  "author": {
    "name": "Lloyd Brookes",
    "email": "75pound@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/75lb/collect-all/issues"
  },
  "dependencies": {
    "stream-connect": "^1.0.2",
    "stream-via": "^1.0.3"
  },
  "description": "Returns a stream which becomes readable once all input is received",
  "devDependencies": {
    "jsdoc-to-markdown": "^1.3.3",
    "tape": "^4.5.1"
  },
  "directories": {},
  "dist": {
    "shasum": "39450f1e7aa6086570a006bce93ccf1218a77ea1",
    "tarball": "https://registry.npmjs.org/collect-all/-/collect-all-1.0.2.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gitHead": "c81377394a4bf817acf7e61befdf4f7d7e4e1b6a",
  "homepage": "https://github.com/75lb/collect-all#readme",
  "keywords": [],
  "license": "MIT",
  "main": "./lib/collect-all.js",
  "maintainers": [
    {
      "name": "75lb",
      "email": "75pound@gmail.com"
    }
  ],
  "name": "collect-all",
  "optionalDependencies": {},
  "readme": "[![view on npm](http://img.shields.io/npm/v/collect-all.svg)](https://www.npmjs.org/package/collect-all)\n[![npm module downloads](http://img.shields.io/npm/dt/collect-all.svg)](https://www.npmjs.org/package/collect-all)\n[![Build Status](https://travis-ci.org/75lb/collect-all.svg?branch=master)](https://travis-ci.org/75lb/collect-all)\n[![Dependency Status](https://david-dm.org/75lb/collect-all.svg)](https://david-dm.org/75lb/collect-all)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](https://github.com/feross/standard)\n\n<a name=\"module_collect-all\"></a>\n## collect-all\nReturns a stream which fires a callback and becomes readable once all input is received.\n\nBy default the callback is invoked with a Buffer instance containing all concatenated input. If you set the option `{ objectMode: true }` the callback is invoked with an array containing all objects received.\n\n<a name=\"exp_module_collect-all--collectAll\"></a>\n### collectAll([callback], [options]) ⇒ <code>[Duplex](https://nodejs.org/api/stream.html#stream_class_stream_duplex)</code> ⏏\n**Kind**: Exported function  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [callback] | <code>function</code> | Called once with the collected input data (by default a `Buffer` instance, or array in `objectMode`.). The value returned by this callback function will be passed downstream. |\n| [options] | <code>object</code> | [Stream options](https://nodejs.org/dist/latest-v5.x/docs/api/stream.html#stream_new_stream_readable_options) object, passed to the constructor for the stream returned by `collect-all`. If the callback function supplied returns a non-string/buffer value, set `options.objectMode` to `true`. |\n\n**Example**  \nAn example command-line client script - string input received at stdin is stamped with `received` then written to  stdout.\n```js\nvar collectAll = require('collect-all')\nprocess.stdin\n  .pipe(collectAll(function (input) {\n    input = 'received: ' + input\n    return input\n  }))\n  .pipe(process.stdout)\n```\n\nAn object-mode example:\n```js\nvar collectAll = require('collect-all')\n\nfunction onAllCollected (collected) {\n  console.log('Objects collected: ' + collected.length)\n}\n\nvar stream = collectAll(onAllCollected, { objectMode: true })\nstream.write({})\nstream.write({})\nstream.end({}) // outputs 'Objects collected: 3'\n```\n\n* * *\n\n&copy; 2015-16 Lloyd Brookes \\<75pound@gmail.com\\>. Documented by [jsdoc-to-markdown](https://github.com/jsdoc2md/jsdoc-to-markdown).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/75lb/collect-all.git"
  },
  "scripts": {
    "docs": "jsdoc2md -t jsdoc2md/README.hbs lib/*.js > README.md; echo",
    "lint": "jshint lib/*.js bin/*.js test/*.js; echo",
    "test": "tape test/*.js"
  },
  "version": "1.0.2"
}
